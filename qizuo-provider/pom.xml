<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.qizuo.provider</groupId>
    <artifactId>qizuo-provider</artifactId>
    <packaging>pom</packaging>
    <name>qizuo-provider</name>
    <description>服务提供者</description>

    <!-- 父项目 -->
    <parent>
        <groupId>com.qizuo</groupId>
        <artifactId>qizuo</artifactId>
        <version>1.0</version>
    </parent>

    <!-- 子项目 -->
    <modules>
        <module>qizuo-provider-user</module>
        <module>qizuo-provider-user-admin</module>
    </modules>

    <properties>
    </properties>

    <dependencies>
        <!-- 熔断/限流/降级 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-hystrix</artifactId>
        </dependency>
        <!-- 负载均衡服务调用feign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-feign</artifactId>
        </dependency>
        <!-- web的场景，自动帮我们引入了web模块开发需要的相关jar包(tomcat/springmvc等) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- jolokia jmx监控 -->
        <dependency>
            <groupId>org.jolokia</groupId>
            <artifactId>jolokia-core</artifactId>
        </dependency>
        <!-- jwt token携带 -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-jwt</artifactId>
        </dependency>
        <!-- *********工具开始********* -->
        <!-- 连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
        </dependency>
        <!-- 谷歌工具 -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <!-- 编码解码工具 -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>
        <!-- object to object utils(就是将两个相同的对象进行转换) -->
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
        </dependency>
        <!-- 参数校验 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- 配置文件读取 spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- spring aop 增强使用 -->
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-aop</artifactId>-->
        <!--</dependency>-->
        <!-- *********工具结束********* -->
        <!-- *****************common项目开始***************** -->
        <dependency>
            <groupId>com.qizuo.common.base</groupId>
            <artifactId>qizuo-common-base</artifactId>
            <version>1.0</version>
        </dependency>
        <!-- *****************common结束***************** -->
    </dependencies>

    <!-- maven多环境切换 -->
    <!--<profiles>-->
        <!--<profile>-->
            <!--<id>dev</id>-->
            <!--<properties>-->
                <!--<profileActive>dev</profileActive>-->
            <!--</properties>-->
            <!--<activation>-->
                <!--<activeByDefault>true</activeByDefault>-->
            <!--</activation>-->
        <!--</profile>-->
        <!--<profile>-->
            <!--<id>pro</id>-->
            <!--<properties>-->
                <!--<profileActive>pro</profileActive>-->
            <!--</properties>-->
        <!--</profile>-->
    <!--</profiles>-->

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!-- 热部署方式2 -->
            <!-- SpringBoot 项目借由 spring-boot-maven-plugin 插件，通过 Maven 将项目打包成可执行的 JAR（Fat Jar） 或者 WAR，由此插件生成的 Jar 包，由以下两部分组成：
            lib目录，用来存放项目所依赖的 Jar 包
            spring boot loader 相关的类 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!-- 生成Actuator使用的构建信息文件build-info.properties -->
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <!-- 热部署 -->
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>springloaded</artifactId>
                        <version>1.2.5.RELEASE</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- 添加docker-maven插件 -->
            <!-- 在我们持续集成过程中，项目工程一般使用 Maven 编译打包，然后生成镜像，通过镜像上线，能够大大提供上线效率，同时能够快速动态扩容，快速回滚，着实很方便。docker-maven-plugin 插件就是为了帮助我们在Maven工程中，通过简单的配置，自动生成镜像并推送到仓库中 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <configuration>
                    <imageName>${project.artifactId}:${project.version}</imageName>
                    <baseImage>java</baseImage>
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>