<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.qizuo</groupId>
    <artifactId>qizuo</artifactId>
    <version>1.0</version>
    <!-- 父项目必须为pom，而且存在依赖关系的子项目，打包的时候不能单个打包，最好在父项目中，直接install才能成功 -->
    <packaging>pom</packaging>

    <!-- 变成springboot项目 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.11.RELEASE</version>
    </parent>

    <!-- 子模块(打包时候如果找不到依赖子项目，要先父项目全局Install下，将所有包放到本地maven仓库中) -->
    <modules>
        <module>qizuo-common</module>
        <module>qizuo-eureka</module>
        <module>qizuo-config</module>
        <module>qizuo-zuul</module>
        <module>qizuo-admin</module>
        <module>qizuo-view</module>
        <module>qizuo-generator</module>
        <module>qizuo-provider</module>
        <module>qizuo-provider-api</module>
    </modules>

    <!-- 作者信息 -->
    <developers>
        <developer>
            <name>qizuo</name>
            <url>https://qizuo.net</url>
            <email>a554657207@126.com</email>
        </developer>
    </developers>

    <!-- 常用配置项(版本) -->
    <properties>
        <springfox-swagger.version>2.8.0</springfox-swagger.version>
        <commons-codec.version>1.10</commons-codec.version>
        <jjwt.version>0.7.0</jjwt.version>
        <jackson.version>1.9.13</jackson.version>
        <mybatis-spring-boot-starter.version>1.2.0</mybatis-spring-boot-starter.version>
        <druid.version>1.0.29</druid.version>
        <mapper.version>3.4.0</mapper.version>
        <springframework.version>4.3.15.RELEASE</springframework.version>
        <curator.version>2.10.0</curator.version>
        <mysql.version>5.1.39</mysql.version>
        <guava.version>19.0</guava.version>
        <spring-boot-admin.version>1.5.7</spring-boot-admin.version>
        <httpclientutil.version>1.0</httpclientutil.version>
        <feign-form.version>3.0.3</feign-form.version>
        <spring.version>4.3.11.RELEASE</spring.version>
        <fastjson.version>1.2.29</fastjson.version>
        <modelmapper.version>1.1.2</modelmapper.version>
        <weixin-java-mp.version>3.9.0</weixin-java-mp.version>
        <jaxb-api.version>2.3.0</jaxb-api.version>
        <platform-bom.version>Brussels-SR8</platform-bom.version>
        <spring-cloud.version>Edgware.SR3</spring-cloud.version>
        <hystrix-core.version>1.5.10</hystrix-core.version>
        <swagger-butler-core.version>1.1.0</swagger-butler-core.version>
        <UserAgentUtils.version>1.20</UserAgentUtils.version>
        <commons-fileupload.version>1.3.1</commons-fileupload.version>
        <springloaded.version>1.2.5.RELEASE</springloaded.version>
        <lombok.version>1.16.14</lombok.version>
        <kaptcha.version>2.3.2</kaptcha.version>
        <joda-time.version>2.9.6</joda-time.version>
        <hutool-all.version>3.0.7</hutool-all.version>
        <commons-lang3.version>3.5</commons-lang3.version>
        <poi.version>4.1.1</poi.version>
        <jxl.version>2.6.12</jxl.version>
        <itext.version>2.1.7</itext.version>
        <flying-saucer-pdf.version>9.1.7</flying-saucer-pdf.version>
        <freemarker.version>2.3.23</freemarker.version>
        <jackson-databind.version>2.8.4</jackson-databind.version>
        <logstash-logback-encoder.version>4.6</logstash-logback-encoder.version>
        <com.dangdang.version>2.1.5</com.dangdang.version>
        <liquibase-core.version>3.5.3</liquibase-core.version>
        <druid-spring-boot-starter.version>1.1.6</druid-spring-boot-starter.version>
        <mybatis.version>3.4.2</mybatis.version>
        <pagehelper.version>5.0.3</pagehelper.version>
        <mybatis-json-simple.version>1.1.1</mybatis-json-simple.version>
        <mybatis-generator-core.version>1.3.2</mybatis-generator-core.version>
        <pagehelper-spring-boot-starter.version>1.1.2</pagehelper-spring-boot-starter.version>
        <commons-dbcp.version>1.4</commons-dbcp.version>
        <webmagic-core.version>0.7.3</webmagic-core.version>
        <jackson-bom.version>2.10.0</jackson-bom.version>
    </properties>

    <!-- 依赖引入 -->
    <dependencies>
        <!-- eureka client父 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>
        <!-- config client父 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <!-- 监控client父 -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
        </dependency>
        <!-- 监控client父,真正与eureka结合的时候只需要这个，如果不是和其结合，就用上面的 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- 权限认证父 类似于spring-boot-starter-security -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-security</artifactId>
        </dependency>


        <!-- 消息队列kafka client&springcloudbus父spring-cloud-starter-bus-kafka  -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>
        <!-- redis client父 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- 日志收集 -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>
        <!-- swagger接口api -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>
        <!-- jdk11必须要配置这个，jdk8就不需要了 -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${jaxb-api.version}</version>
        </dependency>
    </dependencies>

    <!-- 子项目版本控制(如果其他dependencies中有version，这个地方的version版本不会被下载)；如果下面包没有被实际应用，也不会下载;其它情况只要子模块/父模块中dependencies引入了，并且没有version就会按照下面配置进行下载 -->
    <dependencyManagement>
        <dependencies>
            <!-- ***************spring开始*************** -->
            <!-- spring核心扩展 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <!-- spring集成web环境 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <!-- spring事务管理 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- spring-boot-admin -->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui-login</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-server</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui-hystrix</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <!--<dependency>-->
            <!--<groupId>de.codecentric</groupId>-->
            <!--<artifactId>spring-boot-admin-server-ui-activiti</artifactId>-->
            <!--<version>1.5.7</version>-->
            <!--</dependency>-->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui-turbine</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <!-- 以下两个配置可以解决不同版本springcloud jar包冲突 -->
            <dependency>
                <groupId>io.spring.platform</groupId>
                <artifactId>platform-bom</artifactId>
                <version>${platform-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 熔断 -->
            <dependency>
                <groupId>com.netflix.hystrix</groupId>
                <artifactId>hystrix-core</artifactId>
                <version>${hystrix-core.version}</version>
            </dependency>
            <!-- ***************spring包结束*************** -->


            <!-- ***************dao层相关jar包开始*************** -->
            <!-- 集成mybatis -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis-spring-boot-starter.version}</version>
            </dependency>
            <!-- spring集成mybatis -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <!-- mybatis分页 -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>
            <!-- spring集成mybatis -->
            <dependency>
                <groupId>com.googlecode.json-simple</groupId>
                <artifactId>json-simple</artifactId>
                <version>${mybatis-json-simple.version}</version>
            </dependency>
            <!-- mybatis mapper -->
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>mapper</artifactId>
                <version>${mapper.version}</version>
            </dependency>
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>mapper-spring-boot-starter</artifactId>
                <version>${mybatis-json-simple.version}</version>
            </dependency>
            <!-- mybatis 自动生成代码1.3.5 -->
            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-core</artifactId>
                <version>${mybatis-generator-core.version}</version>
            </dependency>
            <!-- page 分页(tk.mybatis也可以) -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper-spring-boot-starter.version}</version>
            </dependency>
            <!-- mybatis generator -->
            <dependency>
                <groupId>commons-dbcp</groupId>
                <artifactId>commons-dbcp</artifactId>
                <version>${commons-dbcp.version}</version>
            </dependency>
            <!-- 集成mysql -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!-- 集成druid1.1.0 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid-spring-boot-starter.version}</version>
            </dependency>
            <!-- 数据库迁移工具 -->
            <dependency>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-core</artifactId>
                <version>${liquibase-core.version}</version>
            </dependency>
            <!-- ***************dao层相关jar包结束*************** -->


            <!-- ***************分布式定时开始*************** -->
            <dependency>
                <groupId>com.dangdang</groupId>
                <artifactId>elastic-job-lite-spring</artifactId>
                <version>${com.dangdang.version}</version>
            </dependency>
            <dependency>
                <artifactId>elastic-job-lite-core</artifactId>
                <groupId>com.dangdang</groupId>
                <version>${com.dangdang.version}</version>
            </dependency>
            <!-- curator和zookeeper有一定关系，这地方主要是为了搭配elastic定时 -->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-client</artifactId>
                <version>${curator.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>${curator.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${curator.version}</version>
            </dependency>
            <!-- ***************分布式定时结束*************** -->
            <!-- ***************分布式日志开始*************** -->
            <dependency>
                <groupId>net.logstash.logback</groupId>
                <artifactId>logstash-logback-encoder</artifactId>
                <version>${logstash-logback-encoder.version}</version>
            </dependency>
            <!-- ***************分布式日志结束*************** -->


            <!-- *************** swagger *************** -->
            <!-- 基本 -->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${springfox-swagger.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${springfox-swagger.version}</version>
            </dependency>
            <!-- swagger和zuul相结合，统筹所有服务api -->
            <dependency>
                <groupId>com.didispace</groupId>
                <artifactId>swagger-butler-core</artifactId>
                <version>${swagger-butler-core.version}</version>
            </dependency>
            <!-- *************** swagger *************** -->


            <!-- ***************json开始*************** -->
            <!-- jackson相关api -->
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-jaxrs</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-smile</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-core-asl</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-mapper-asl</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson-databind.version}</version>
            </dependency>
            <!-- 解决springboot中bom版本过低情况 -->
            <!-- type默认为jar，也就是默认以jar方式导入，下面type=pom代表将pom文件import进来，然后引入其中的dependencyManagement所有依赖 -->
            <!-- pom文件和java一样都是单继承，上述方式相当于解决多继承 -->
            <dependency>
                <groupId>com.fasterxml.jackson</groupId>
                <artifactId>jackson-bom</artifactId>
                <version>${jackson-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- fastjson -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
            <!-- object to object utils(就是将两个相同的对象进行转换) -->
            <dependency>
                <groupId>org.modelmapper</groupId>
                <artifactId>modelmapper</artifactId>
                <version>${modelmapper.version}</version>
            </dependency>
            <!-- ***************json结束*************** -->
            <!-- ***************office开始*************** -->
            <!-- flying+freemarker -->
            <dependency>
                <groupId>org.freemarker</groupId>
                <artifactId>freemarker</artifactId>
                <version>${freemarker.version}</version>
            </dependency>
            <dependency>
                <groupId>org.xhtmlrenderer</groupId>
                <artifactId>flying-saucer-pdf</artifactId>
                <version>${flying-saucer-pdf.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.lowagie/itext-->
            <dependency>
                <groupId>com.lowagie</groupId>
                <artifactId>itext</artifactId>
                <version>${itext.version}</version>
            </dependency>
            <!-- jxl -->
            <dependency>
                <groupId>net.sourceforge.jexcelapi</groupId>
                <artifactId>jxl</artifactId>
                <version>${jxl.version}</version>
            </dependency>
            <!-- poi 以下两种jar包分别对应两个版本的excel -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <!-- ***************office结束*************** -->
            <!-- ***************常用工具开始*************** -->
            <!-- google 常用java utils -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <!-- apache 常用工具类 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <!-- hutool java utils -->
            <dependency>
                <groupId>com.xiaoleilu</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool-all.version}</version>
            </dependency>
            <!-- java 时间操作 -->
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>${joda-time.version}</version>
            </dependency>
            <!-- 随机验证码(为什么去掉这个，因为不让它加载进来就会少一个api 会启动报错during start) -->
            <dependency>
                <groupId>com.github.penggle</groupId>
                <artifactId>kaptcha</artifactId>
                <version>${kaptcha.version}</version>
                <!--<exclusions>-->
                <!--<exclusion>-->
                <!--<artifactId>javax.servlet-api</artifactId>-->
                <!--<groupId>javax.servlet</groupId>-->
                <!--</exclusion>-->
                <!--</exclusions>-->
            </dependency>
            <!-- 编码解码工具 -->
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>${commons-codec.version}</version>
            </dependency>
            <!-- token生产 区别于session认证 -->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>${jjwt.version}</version>
            </dependency>
            <!-- http操作 -->
            <dependency>
                <groupId>com.arronlong.httpclientutil</groupId>
                <artifactId>httpclientutil</artifactId>
                <version>${httpclientutil.version}</version>
            </dependency>
            <!-- 使用Feign实现Form表单提交(微服务间文件上传) -->
            <dependency>
                <groupId>io.github.openfeign.form</groupId>
                <artifactId>feign-form</artifactId>
                <version>${feign-form.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.openfeign.form</groupId>
                <artifactId>feign-form-spring</artifactId>
                <version>${feign-form.version}</version>
            </dependency>
            <!--lombok 简化java代码 比如get和set方法可以省略 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <!-- 热部署 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>springloaded</artifactId>
                <version>${springloaded.version}</version>
            </dependency>
            <!-- 微信包 -->
            <dependency>
                <groupId>com.github.binarywang</groupId>
                <artifactId>weixin-java-mp</artifactId>
                <version>${weixin-java-mp.version}</version>
            </dependency>
            <!-- 获取浏览器信息 -->
            <dependency>
                <groupId>eu.bitwalker</groupId>
                <artifactId>UserAgentUtils</artifactId>
                <version>${UserAgentUtils.version}</version>
            </dependency>
            <!-- 上传下载工具 -->
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons-fileupload.version}</version>
            </dependency>
            <!-- 二维码 -->
            <dependency>
                <groupId>us.codecraft</groupId>
                <artifactId>webmagic-core</artifactId>
                <version>${webmagic-core.version}</version>
            </dependency>
            <dependency>
                <groupId>us.codecraft</groupId>
                <artifactId>webmagic-extension</artifactId>
                <version>${webmagic-core.version}</version>
            </dependency>
            <!-- ***************常用工具结束*************** -->
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- 插件 -->
        <plugins>
            <!-- SpringBoot 项目借由 spring-boot-maven-plugin 插件，通过 Maven 将项目打包成可执行的 JAR（Fat Jar） 或者 WAR，由此插件生成的 Jar 包，由以下两部分组成：
                  lib目录，用来存放项目所依赖的 Jar 包
                  spring boot loader 相关的类 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!-- 生成Actuator使用的构建信息文件build-info.properties -->
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- 热部署方式2 -->
                <!--        <dependencies>-->
                <!--          &lt;!&ndash; 热部署 &ndash;&gt;-->
                <!--          <dependency>-->
                <!--            <groupId>org.springframework</groupId>-->
                <!--            <artifactId>springloaded</artifactId>-->
                <!--          </dependency>-->
                <!--        </dependencies>-->
            </plugin>
            <!-- 指定maven编译的jdk相关信息 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!-- docker-maven插件 -->
            <!-- 在我们持续集成过程中，项目工程一般使用 Maven 编译打包，然后生成镜像，通过镜像上线，能够大大提供上线效率，同时能够快速动态扩容，快速回滚，着实很方便。docker-maven-plugin 插件就是为了帮助我们在Maven工程中，通过简单的配置，自动生成镜像并推送到仓库中 -->
            <!-- 这个插件一般是配合docker程序来的，也就是必须安装docker，一般是流水线构建，推送到linux自动maven打包成docker镜像 -->
            <!-- 这里先放到父项目，如果property拿不到，可以放到子项目 -->
            <!--            <plugin>-->
            <!--                <groupId>com.spotify</groupId>-->
            <!--                <artifactId>docker-maven-plugin</artifactId>-->
            <!--                <version>0.4.13</version>-->
            <!--                <configuration>-->
            <!--                    &lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
            <!--                    <imageName>${project.artifactId}:${project.version}</imageName>-->
            <!--                    &lt;!&ndash; 生命基础镜像，相当于Dockerfile中的FROM &ndash;&gt;-->
            <!--                    <baseImage>java</baseImage>-->
            <!--                    &lt;!&ndash; 说明镜像启动后执行什么指令 &ndash;&gt;-->
            <!--                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
            <!--                    <resources>-->
            <!--                        <resource>-->
            <!--                            <targetPath>/</targetPath>-->
            <!--                            &lt;!&ndash;war包所在的路径  此处配置的即对应target目录&ndash;&gt;-->
            <!--                            <directory>${project.build.directory}</directory>-->
            <!--                            &lt;!&ndash; 需要包含的jar包,这里对应的是Dockerfile中添加的文件名　&ndash;&gt;-->
            <!--                            <include>${project.build.finalName}.jar</include>-->
            <!--                        </resource>-->
            <!--                    </resources>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
        </plugins>
    </build>

    <!-- 为什么setting文件中配置这个地方还要再配置一个 -->
    <!-- mavensetting文件中，mirrorOf和id一样，只能有一个，也就是central就算有多个，也只会走一个(最前面那个)；如果是*代表所有都从这走，所以这个一般放到最后 -->
    <!-- 上述那种情况就会导致，无法设置多个，所以最好在pom.xml中配置，这样就不会覆盖了 -->
    <!-- 最终请求的时候，会结合setting和pom中配置，如果id和mirrorOf一样，就会进行替换（即setting文件中只要配置一个阿里云center即可） -->
    <!-- mvn help:effective-settings查看最终生效的配置 -->
    <repositories>
        <repository>
            <id>huaweiyun</id>
            <url>https://mirrors.huaweicloud.com/repository/maven</url>
            <!-- 下载稳定版本，不要下载不稳定的 -->
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>tengxunyun</id>
            <url>http://mirrors.cloud.tencent.com/nexus/repository/maven-public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
</project>
